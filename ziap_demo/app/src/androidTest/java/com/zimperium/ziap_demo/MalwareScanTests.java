package com.zimperium.ziap_demo;

import android.content.Context;
import android.content.Intent;
import android.os.Looper;
import androidx.test.InstrumentationRegistry;

import com.zimperium.zdetection.api.v1.ZDetection;
import com.zimperium.zdetection.api.v1.enums.ScanType;
import com.zimperium.zdetection.api.v1.enums.ZCloudState;
import com.zimperium.zdetection.api.v1.enums.ZEngineState;
import com.zimperium.zdetection.api.v1.enums.ZErrorState;
import com.zimperium.zdetection.api.v1.malware.MaliciousAppInfo;
import com.zimperium.zdetection.api.v1.malware.MalwareScanCallback;
import com.zimperium.zdetection.api.v1.malware.MalwareScanController;
import com.zimperium.zdetection.internal.ZDetectionInternal;
import com.zimperium.ziap_demo.ui.LoadingActivity;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

import static com.zimperium.zdetection.api.v1.ZDetection.shutdownZIAPEngine;
import static java.lang.Thread.sleep;
import static org.junit.Assert.assertNotNull;

public class MalwareScanTests {

    public CountDownLatch waitForLogin;
    public Context appContext;
    public CountDownLatch waitForLogout;
    public CountDownLatch waitForScanToComplete;

    public boolean scanComplete = false;
    public List<MaliciousAppInfo> maliciousApps = new ArrayList<>();



    public static String prefix = "[LoggerMalwareScanTests] : ";

    public void log (String message) {

        zIAPUtils.log(prefix, message);

    }

    @Before
    public void setUp() {

        waitForLogin = new CountDownLatch(1);
        appContext = InstrumentationRegistry.getTargetContext();
        waitForLogout = new CountDownLatch(1);
        waitForScanToComplete = new CountDownLatch(1);

        if (Looper.myLooper() == null)
        {
            Looper.prepare();
        }
    }

    public void runApp(){
        Context appContext = InstrumentationRegistry.getTargetContext();
        Intent intent = new Intent(appContext, LoadingActivity.class);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        appContext.startActivity(intent);

        long stime = System.currentTimeMillis();
        long rTime = TimeUnit.MINUTES.toMillis(2);
        while((System.currentTimeMillis()-stime) < rTime)
        {
            try {
                sleep(100);
                assertNotNull(ZDetection.getDetectionDetailedInfo(appContext.getApplicationContext()).z9DownloadDate());

            }catch (Exception e)
            {}
        }
    }

    @Test
    public void _01_testStartMalwareScan_ManualScan_or_LOCAL_AND_SERVER () {

        Context appContext = InstrumentationRegistry.getTargetContext();
        runApp();
        zIAPUtils.setLicenseKey_usingNewMethod(appContext, LoginTokens.LoginToken);
        zIAPUtils.startDetection_usingDetectCriticalThreatsMethod(appContext);
        zIAPUtils.validate_Cloudstate_Enginestate_And_Errorstate(appContext, waitForLogin, ZCloudState.RUNNING, ZEngineState.DETECTING, ZErrorState.NO_ERROR);
        MalwareScanCallback malwareScanCallback = zIAPUtils.createNewMalwareScanCallback(maliciousApps, waitForScanToComplete, prefix);
        MalwareScanController malwareScanController = ZDetection.startMalwareScan(appContext, malwareScanCallback);
        try  {
            scanComplete = waitForScanToComplete.await(10, TimeUnit.MINUTES);

        }
        catch (InterruptedException e) {
            log("Error occured while waiting for scan to complete");
            e.printStackTrace();
        }

        Assert.assertEquals("Scan failed to complete in 10 minutes ", scanComplete, true);
        zIAPUtils.printAllMaliciousAppsFound(maliciousApps, prefix);

    }

    @Test
    public void _02_testStartMalwareScan_LOCAL () {
        Context appContext = InstrumentationRegistry.getTargetContext();
        runApp();
        zIAPUtils.setLicenseKey_usingNewMethod(appContext, LoginTokens.LoginToken);
        zIAPUtils.startDetection_usingDetectCriticalThreatsMethod(appContext);
        zIAPUtils.validate_Cloudstate_Enginestate_And_Errorstate(appContext, waitForLogin, ZCloudState.RUNNING, ZEngineState.DETECTING, ZErrorState.NO_ERROR);
        MalwareScanCallback malwareScanCallback = zIAPUtils.createNewMalwareScanCallback(maliciousApps, waitForScanToComplete, prefix);
        MalwareScanController malwareScanController = ZDetection.startMalwareScan(appContext, ScanType.LOCAL, malwareScanCallback);
        try  {
            scanComplete = waitForScanToComplete.await(10, TimeUnit.MINUTES);

        }
        catch (InterruptedException e) {
            log("Error occured while waiting for scan to complete");
            e.printStackTrace();

        }

        Assert.assertEquals("Scan failed to complete in 10 minutes ", scanComplete, true);
        zIAPUtils.printAllMaliciousAppsFound(maliciousApps, prefix);

    }

    @Test
    public void _03_testStartMalwareScan_SERVER () {
        Context appContext = InstrumentationRegistry.getTargetContext();
        runApp();
        zIAPUtils.setLicenseKey_usingNewMethod(appContext, LoginTokens.LoginToken);
        zIAPUtils.startDetection_usingDetectCriticalThreatsMethod(appContext);
        zIAPUtils.validate_Cloudstate_Enginestate_And_Errorstate(appContext, waitForLogin, ZCloudState.RUNNING, ZEngineState.DETECTING, ZErrorState.NO_ERROR);
        MalwareScanCallback malwareScanCallback = zIAPUtils.createNewMalwareScanCallback(maliciousApps, waitForScanToComplete, prefix);
        MalwareScanController malwareScanController = ZDetection.startMalwareScan(appContext, ScanType.SERVER, malwareScanCallback);
        try  {

            scanComplete = waitForScanToComplete.await(10, TimeUnit.MINUTES);

        } catch (InterruptedException e) {

            log("Error occured while waiting for scan to complete");

            e.printStackTrace();

        }

        Assert.assertEquals("Scan failed to complete in 10 minutes ", scanComplete, true);
        zIAPUtils.printAllMaliciousAppsFound(maliciousApps, prefix);

    }


    @Test
    public void _04_testStartMalwareScan_LOCAL_AND_SERVER_withIncrementalAsTrue () {
        Context appContext = InstrumentationRegistry.getTargetContext();
        runApp();
        zIAPUtils.setLicenseKey_usingNewMethod(appContext, LoginTokens.LoginToken);
        zIAPUtils.startDetection_usingDetectCriticalThreatsMethod(appContext);
        zIAPUtils.validate_Cloudstate_Enginestate_And_Errorstate(appContext, waitForLogin, ZCloudState.RUNNING, ZEngineState.DETECTING, ZErrorState.NO_ERROR);
        firstManualScanRunForIncrementalScanTestsOnly();
        MalwareScanCallback malwareScanCallback = zIAPUtils.createNewMalwareScanCallback(maliciousApps, waitForScanToComplete, prefix);
        MalwareScanController malwareScanController = ZDetection.startMalwareScan(appContext, ScanType.LOCAL_AND_SERVER, malwareScanCallback, true);
        try  {
            scanComplete = waitForScanToComplete.await(10, TimeUnit.MINUTES);

        }
        catch (InterruptedException e) {
            log("Error occured while waiting for scan to complete");
            e.printStackTrace();

        }

        Assert.assertEquals("Scan failed to complete in 10 minutes ", scanComplete, true);
        zIAPUtils.printAllMaliciousAppsFound(maliciousApps, prefix);

    }


    @Test
    public void _05_testStartMalwareScan_LOCAL_withIncrementalAsTrue () {
        Context appContext = InstrumentationRegistry.getTargetContext();
        runApp();
        zIAPUtils.setLicenseKey_usingNewMethod(appContext, LoginTokens.LoginToken);
        zIAPUtils.startDetection_usingDetectCriticalThreatsMethod(appContext);
        zIAPUtils.validate_Cloudstate_Enginestate_And_Errorstate(appContext, waitForLogin, ZCloudState.RUNNING, ZEngineState.DETECTING, ZErrorState.NO_ERROR);
        firstManualScanRunForIncrementalScanTestsOnly();
        MalwareScanCallback malwareScanCallback = zIAPUtils.createNewMalwareScanCallback(maliciousApps, waitForScanToComplete, prefix);
        MalwareScanController malwareScanController = ZDetection.startMalwareScan(appContext, ScanType.LOCAL, malwareScanCallback, true);
        try  {
            scanComplete = waitForScanToComplete.await(10, TimeUnit.MINUTES);

        }
        catch (InterruptedException e) {
            log("Error occured while waiting for scan to complete");
            e.printStackTrace();
        }

        Assert.assertEquals("Scan failed to complete in 10 minutes ", scanComplete, true);
        zIAPUtils.printAllMaliciousAppsFound(maliciousApps, prefix);
    }

    // This test will run scanning for apps installed after previous or LAST_MANUAL_MALWARE_SCAN_DATE
    // For this to be more correct functional test, install some apps after first manual scan
    @Test
    public void _06_testStartMalwareScan_SERVER_withIncrementalAsTrue () {
        Context appContext = InstrumentationRegistry.getTargetContext();
        runApp();
        zIAPUtils.setLicenseKey_usingNewMethod(appContext, LoginTokens.LoginToken);
        zIAPUtils.startDetection_usingDetectCriticalThreatsMethod(appContext);
        zIAPUtils.validate_Cloudstate_Enginestate_And_Errorstate(appContext, waitForLogin, ZCloudState.RUNNING, ZEngineState.DETECTING, ZErrorState.NO_ERROR);
        firstManualScanRunForIncrementalScanTestsOnly();
        MalwareScanCallback malwareScanCallback = zIAPUtils.createNewMalwareScanCallback(maliciousApps, waitForScanToComplete, prefix);
        MalwareScanController malwareScanController = ZDetection.startMalwareScan(appContext, ScanType.SERVER, malwareScanCallback, true);
        try  {
            scanComplete = waitForScanToComplete.await(10, TimeUnit.MINUTES);

        }
        catch (InterruptedException e) {
            log("Error occured while waiting for scan to complete");
            e.printStackTrace();
        }

        Assert.assertEquals("Scan failed to complete in 10 minutes ", scanComplete, true);
        zIAPUtils.printAllMaliciousAppsFound(maliciousApps, prefix);
    }

    @Test
    public void _07_testStopMalwareScan_usingMalwareScanController () {
        Context appContext = InstrumentationRegistry.getTargetContext();
        runApp();
        zIAPUtils.setLicenseKey_usingNewMethod(appContext, LoginTokens.LoginToken);
        zIAPUtils.startDetection_usingDetectCriticalThreatsMethod(appContext);
        zIAPUtils.validate_Cloudstate_Enginestate_And_Errorstate(appContext, waitForLogin, ZCloudState.RUNNING, ZEngineState.DETECTING, ZErrorState.NO_ERROR);
        firstManualScanRunForIncrementalScanTestsOnly();
        MalwareScanCallback malwareScanCallback = zIAPUtils.createNewMalwareScanCallback(maliciousApps, waitForScanToComplete, prefix);
        MalwareScanController malwareScanController = ZDetection.startMalwareScan(appContext, ScanType.SERVER, malwareScanCallback, true);
        try  {
            sleep(60000);
            malwareScanController.stopScan();
            //scanComplete = waitForScanToComplete.await(10, TimeUnit.MINUTES);

        }
        catch (InterruptedException e) {
            log("Error occured while stopping scan");
            e.printStackTrace();
        }

        //Assert.assertEquals("Scan failed to complete in 10 minutes ", scanComplete, true);
        zIAPUtils.printAllMaliciousAppsFound(maliciousApps, prefix);

    }

    @Test
    public void _08_testRunQuickMalwareScan () {
        Context appContext = InstrumentationRegistry.getTargetContext();
        runApp();
        zIAPUtils.setLicenseKey_usingNewMethod(appContext, LoginTokens.LoginToken);
        zIAPUtils.startDetection_usingDetectCriticalThreatsMethod(appContext);
        zIAPUtils.validate_Cloudstate_Enginestate_And_Errorstate(appContext, waitForLogin, ZCloudState.RUNNING, ZEngineState.DETECTING, ZErrorState.NO_ERROR);
        String[] malwares = ZDetection.runQuickMalwareScan(appContext);
        for(String packge : malwares) {
            log(packge);
        }
    }

    private void firstManualScanRunForIncrementalScanTestsOnly() {

        MalwareScanCallback malwareScanCallback = zIAPUtils.createNewMalwareScanCallback(maliciousApps, waitForScanToComplete, prefix);
        MalwareScanController malwareScanController = ZDetection.startMalwareScan(appContext, ScanType.LOCAL_AND_SERVER, malwareScanCallback);
        try  {
            scanComplete = waitForScanToComplete.await(10, TimeUnit.MINUTES);

        }
        catch (InterruptedException e) {
            log("Error occured while waiting for scan to complete");
            e.printStackTrace();
        }

        Assert.assertEquals("Scan failed to complete in 10 minutes ", scanComplete, true);
        zIAPUtils.printAllMaliciousAppsFound(maliciousApps, prefix);

        try {
            sleep(60000);

        }
        catch (InterruptedException exception) {
            log("Error occured while waiting after first manual scan run " + exception.getMessage());
            exception.printStackTrace();
        }

    }

    @After
    public void tearDown() {
        //Shutdown zIAP engine
        ZDetectionInternal.logout(appContext);
        shutdownZIAPEngine();
        zIAPUtils.validate_Cloudstate_Enginestate_And_Errorstate(appContext, waitForLogout, ZCloudState.NOT_RUNNING, ZEngineState.NOT_DETECTING, ZErrorState.LOGGED_OUT);

    }

}
